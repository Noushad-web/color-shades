{"version":3,"sources":["component/ColorShades.jsx","component/Cursor.jsx","App.js","reportWebVitals.js","index.js"],"names":["ColorShades","useState","typedInput","setTypedInput","convertedInput","setConverterInput","luminous","setLuminous","errorMessage","setErrorMessage","wrapperColorbox","useRef","useEffect","i","array","concat","loop","className","action","onSubmit","e","preventDefault","target","value","startsWith","hslValue","hexToHsl","hexValue","toHex","error","console","message","setTimeout","checkInput","current","style","display","type","placeholder","ref","map","element","index","backgroundColor","undefined","children","Cursor","cursorRef","x","y","cursorPosition","setCursorPosition","updateCursorPostion","clientX","clientY","window","matchMedia","matches","addEventListener","cursorElement","getAttribute","localName","classList","add","remove","innerHTML","cssText","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.280f6415.chunk.js","sourcesContent":["\r\n\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport hexToHsl from 'hex-to-hsl';\r\nimport toHex from 'colornames';\r\n\r\n\r\n\r\nconst ColorShades = () => {\r\n\r\n    const [typedInput, setTypedInput] = useState('');\r\n    const [convertedInput, setConverterInput] = useState('');\r\n    const [luminous, setLuminous] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const wrapperColorbox = useRef();\r\n\r\n\r\n    function loop(){\r\n        for (let i = 0; i < 21; i++) {\r\n            setLuminous((array) => array.concat(i*5) );\r\n        }\r\n    };\r\n    \r\n\r\n    function checkInput(value) {\r\n\r\n\r\n        try {\r\n            if (value.startsWith('#')) {\r\n                const hslValue = hexToHsl(value);\r\n                setConverterInput(hslValue);\r\n                return hslValue;\r\n            } else {\r\n                const hexValue = toHex(value);\r\n                const hslValue = hexToHsl(hexValue);\r\n                setConverterInput(hslValue);\r\n                return hslValue;\r\n            }\r\n        } catch (error) {\r\n            console.error(error.message);\r\n            setErrorMessage('invalid color name or hex value');\r\n            setTimeout(()=>{\r\n                setErrorMessage('');\r\n            },3000)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function formSubmit(e) {\r\n        e.preventDefault();\r\n        setTypedInput(e.target[0].value);\r\n\r\n        checkInput(e.target[0].value);\r\n        e.target[0].value = '';\r\n        wrapperColorbox.current.style.display = 'flex';\r\n    \r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        setLuminous([]);\r\n        loop();\r\n    },[typedInput])\r\n\r\n    return (\r\n        <div className=\"wrapper \">\r\n            <div className=\"container\">\r\n                <h1 className=\"mb-5 text-light\">Type the color name or hex value</h1>\r\n                <div className=\"wrapper-small col-md-10 \">\r\n                    <form className=\"text-center input-group mb-3 \" action=\"\" onSubmit={formSubmit} >\r\n                        <input type=\"text\" className=\"form-control color-input\" placeholder=\"#003399 or red\" />\r\n                        <button type=\"submit\" className=\"btn ms-2 btn-outline-light rounded\"><i className=\"bi bi-search\"></i> Search</button>\r\n                        <p className=\"text-danger error-para mb-0 ps-2\">{errorMessage}</p>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"row wrapperColorbox g-0\" ref={wrapperColorbox}>\r\n                    {\r\n                        luminous.map((element, index) => {\r\n                            return (\r\n                                <>\r\n                                    <div className=\"col-md-2 col-10 mx-auto mx-md-0 colorBox\"  data-color=\"true\" style={{backgroundColor :`hsl(${convertedInput[0]},${convertedInput[1]}%,${element}%)` }} >\r\n                                       <span>\r\n                                           {wrapperColorbox.current.children[index] === undefined ? null : wrapperColorbox.current.children[index].style.backgroundColor }\r\n                                       </span>\r\n                                    </div>\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ColorShades;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useRef, useState, useEffect } from 'react';\r\n// import hexToHsl from 'hex-to-hsl';\r\n// import toHex from 'colornames';\r\n\r\n// const ColorShades = () => {\r\n\r\n//     const colorDiv = useRef();\r\n//     // const [hexColor, setHexColor] = useState();\r\n//     const [colorShades, setColorShades] = useState([]);\r\n//     const [inputColor, setInputColor] = useState();\r\n//     const [inputChange, setInputChange] = useState();\r\n\r\n\r\n\r\n//     // array for lightness of hsl \r\n//     let arrayLightness = [];\r\n//     for (let i = 0; i < 21; i++) {\r\n//         arrayLightness.push(i * 5);\r\n//     }\r\n\r\n\r\n\r\n//     useEffect(() => {\r\n\r\n//         if (inputColor !== undefined) {\r\n\r\n//             console.log('render');\r\n//             // setColorShades('');\r\n//             changeInput(inputColor);\r\n//             // console.log(colorShades.length);\r\n\r\n//         }\r\n//     });\r\n\r\n\r\n//     // checking conditions if inputed color is in hex form or name format \r\n//     const conditionChecking = (inputValue) => {\r\n\r\n//         if (inputValue.startsWith('#')) {\r\n//             const hslValue = hexToHsl(inputValue);\r\n//             return hslValue;\r\n//         } else {\r\n//             const hexValue = toHex(inputValue);\r\n//             const hslValue = hexToHsl(hexValue);\r\n//             return hslValue;\r\n//         }\r\n\r\n//     }\r\n\r\n\r\n\r\n//     const changeInput = (inputValue) => {\r\n\r\n//         console.log('render2');\r\n//         // checking conditions if inputed color is in hex form or name format \r\n//         let hslValue = conditionChecking(inputValue);\r\n//         const h = hslValue[0];\r\n//         const s = hslValue[1];\r\n\r\n//         arrayLightness.forEach((l, i) => {\r\n//             const finalColorCode = `hsl(${h},${s}%,${l}%)`;\r\n\r\n//             // concatenation of all shades to hook \r\n//             // setColorShades(arrayOfColorCodes => arrayOfColorCodes.concat(finalColorCode));\r\n\r\n//         });\r\n//     }\r\n\r\n\r\n\r\n//     // function call on form submit  \r\n//     const formSubmit = (e) => {\r\n//         e.preventDefault();\r\n//         setInputColor(e.target[0].value.trim());\r\n//     }\r\n\r\n\r\n//     return (\r\n//         <div className=\"wrapper \">\r\n//             <div className=\"container\">\r\n//                 <div className=\"wrapper-small col-md-10 \">\r\n//                     <form className=\"text-center input-group mb-3\" action=\"\" onSubmit={formSubmit}>\r\n//                         <input type=\"text\" className=\"form-control\" placeholder=\"#003399 or red\" onChange={e => setInputChange(e.target.value)} />\r\n//                         <button type=\"submit\" className=\"btn ms-2 btn-outline-success rounded\"><i className=\"bi bi-search\"></i> Search</button>\r\n//                     </form>\r\n//                 </div>\r\n\r\n//                 <div className=\"row g-0\" ref={colorDiv}>\r\n//                     {\r\n//                         arrayLightness.map((element, index) => {\r\n//                             return (\r\n//                                 <>\r\n//                                     <div className=\"col-2 colorBox\" id={index} key={index} style={{ backgroundColor: `${colorShades[index]}` }} >\r\n//                                         <span>{\r\n//                                         console.log(colorShades[index])\r\n//                                         }</span>\r\n//                                     </div>\r\n//                                 </>\r\n//                             )\r\n//                         })\r\n//                     }\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default ColorShades;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useRef, useState, useEffect } from 'react';\r\n\r\n\r\nconst Cursor = () => {\r\n\r\n\r\n    const cursorRef = useRef();\r\n    const [cursorPosition, setCursorPosition] = useState({ x: null, y: null, target: null });\r\n\r\n\r\n\r\n    function updateCursorPostion(e) {\r\n        setCursorPosition({ x: e.clientX, y: e.clientY, target: e.target });\r\n\r\n    }\r\n\r\n    // tracking cursor positions\r\n    useEffect(() => {\r\n\r\n        if (window.matchMedia('(min-width : 768px )').matches) {\r\n            // setting on mouse move event according to viewport\r\n            window.addEventListener('mousemove', updateCursorPostion);\r\n\r\n            const cursorElement = cursorRef.current;\r\n\r\n            if (cursorPosition.target != null) {\r\n\r\n                \r\n                if (cursorPosition.target.getAttribute('data-color')) {\r\n\r\n                    // cursorElement.classList.add('scale');\r\n                    cursorElement.classList.add('blend-mode-img');\r\n                    // cursorElement.innerHTML = cursorPosition.target.style.backgroundColor;\r\n                    // console.log();\r\n\r\n                } else if(cursorPosition.target.localName === 'span') {\r\n\r\n                    cursorElement.classList.add('blend-mode-img');\r\n\r\n                }else{\r\n                    cursorElement.classList.remove('scale');\r\n                    cursorElement.classList.remove('blend-mode-img');\r\n                    cursorElement.innerHTML = '';\r\n                }\r\n\r\n\r\n\r\n                switch (cursorPosition.target.localName) {\r\n\r\n                    case 'span':\r\n                        \r\n                        break;\r\n\r\n                    case 'img':\r\n                        cursorElement.classList.add('blend-mode-img');\r\n                        break;\r\n\r\n                    case 'h1':\r\n                        cursorElement.classList.add('blend-mode-img');\r\n                        break;\r\n\r\n                    default:\r\n                        cursorElement.classList.remove('scale');\r\n                        cursorElement.classList.remove('blend-mode-img');\r\n                        cursorElement.innerHTML = '';\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n            cursorElement.style.cssText = `\r\n            top:${cursorPosition.y}px; \r\n            left:${cursorPosition.x}px;\r\n            border-radius:50%;\r\n            transform:translate(-50%,-50%);\r\n            z-index:99;\r\n            pointer-events:none;`\r\n\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener('mousemove', updateCursorPostion);\r\n        }\r\n    }, [cursorPosition]);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"cursor position-fixed\" ref={cursorRef} >\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cursor;\r\n","\nimport './App.scss';\nimport ColorShades from './component/ColorShades';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Cursor from './component/Cursor';\n\nfunction App() {\n  return (\n    <div className=\"App\"> \n      <Cursor/>\n      <ColorShades/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}